#!/usr/bin/env python2

import salt.key
import salt.client
import salt.config

import sys
import time
import curses

# Set up configs
path = '/etc/salt'
opts = {
    'conf_file': path,
    'sock_dir': '/var/run/salt',
    'pki_dir': '/etc/salt/pki',
    'timeout': 4,
    'mode': 'minions',
    'top_conf': '/etc/salt/top'
}
salt.config.load_config(opts, path, 'SALT_CONFIG')

columns = {}
salt.config.load_config(columns, opts['top_conf'], 'SALT_TOP_CONFIG')
if not columns:
    sys.stderr.write(
        "configuration not found in {0} or {1} environment variable\n".format(
            opts['top_conf'], 'SALT_CONFIG'
        )
    )
    sys.exit(1)

# Initialize the screen
window = curses.initscr()
curses.noecho()
curses.cbreak()
window.keypad(1)
window.nodelay(1)

# Establish salt client
client = salt.client.LocalClient(opts['conf_file'])
key = salt.key.Key(opts)

# This will force a refresh immediately, and save us from having to use the
# same snippet twice in the same function
last_refresh = int(time.time()) - opts['timeout']

def salt_top():
    while True:
        # Get the window dimensions
        dims = window.getmaxyx()

        global last_refresh
        # Only refresh actual data every <timeout + 1> seconds
        if ( int(time.time()) - last_refresh ) > opts['timeout']:
            last_refresh = int(time.time())

        # Get salt-wide statistics
        lines = []
        lines += top_stats()

        # For debugging purposes - remove later
        lines.append('Window Dimensions: {0}'.format(dims))

        if opts['mode'] == 'report':
            # Get list of minions and their stats
            lines += report_stats(0)
        elif opts['mode'] == 'jobs':
            # Get list of jobs and their stats
            lines += job_stats(0)
        elif opts['mode'] == 'top':
            # Get traditional top-style report
            lines += top_report(0)
 
        # Display information using curses
        window.clear()
        count = 0
        for line in lines:
            window.addstr(count, 0, line)
            count += 1
        window.refresh()

        # Check the keyboard for input
        inkey = ''
        try:
            inkey = window.getkey()
        except:
            pass
        if inkey == ' ':
            # Force the data to refresh (probably a bad idea)
            last_refresh -= opts['timeout']
        elif inkey == 'r':
            opts['mode'] = 'report'
        elif inkey == 'j':
            opts['mode'] = 'jobs'
        elif inkey == 't':
            opts['mode'] = 'top'
        elif inkey == 'q':
            break
        # Only check for input several times a second
        curses.napms(50)

def minions_up():
    '''
    Return a list of all of the minions that are up
    '''
    minions = client.cmd('*', 'test.ping', timeout=opts['timeout'])

    return sorted(minions)
 
def active_jobs():
    '''
    Return a list of active jids
    '''
    active = client.cmd('*', 'saltutil.running', timeout=opts['timeout'])
    ret = []
    for minion, data in active.items():
        if not isinstance(data, list):
            continue
        for job in data:
            if not job['jid'] in ret:
                ret.append(job['jid'])

    return ret

def job_stats(sort_column):
    '''
    Return a list of active jobs
    '''
    active = client.cmd('*', 'saltutil.running', timeout=opts['timeout'])
    jobs = []
    for minion, data in active.items():
        if not isinstance(data, list):
            continue
        for job in data:
            if not job['jid'] in jobs:
                jobs.append({'jid': job['jid'],
                            'minion': minion,
                            'fun': job['fun'],
                            'pid': job['pid'],
                            'args': job['arg']})

    ret = []
    frow = ''
    for field in columns['jobs_order']:
        size = int(columns['jobs'][field]['size'])
        name = columns['jobs'][field]['name']
        frow += '{field:<{size}}'.format(size=size, field=name)
    ret.append(frow)
    for job in jobs:
        frow = ''
        for field in columns['jobs_order']:
            size = int(columns['jobs'][field]['size'])
            ffield = '{field:<{size}}'.format(size=size, field=job[field])
            frow += ffield
        ret.append(frow)
    return ret

def draw_columns(columns):
    pass

def top_stats():
    '''
    Return stats that go at the top of the screen
    '''
    time_now = int(time.time())
    # Which minions are Accepted?
    keys = key.list_keys()['minions']
    # Which minions are up?
    minions = minions_up()
    # Which jobs are currently active?
    active = active_jobs()

    # Would it be better to use a jinja template?
    top = []
    top.append('salt-top - {0} - {1}'.format(
        opts['mode'],
        time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(time_now))
        ))
    top.append('Minions Alive: {0}/{1}, '
               'Active Jobs: {2}, '
               'Last Refresh: {3} secs ago'.format(
                   len(minions), len(keys),
                   len(active),
                   time_now - last_refresh
                ))

    # Trim lines according to screen dimensions
    dims = window.getmaxyx()
    ret = []
    count = 0
    for line in top:
        if count < dims[0]:
            ret.append('{0}\n'.format(line[:dims[1]]))
            count += 1

    return ret

def report_stats(sort_column):
    '''
    Return list of minions, sorted by a specific column
    '''
    return []

def top_report(sort_column):
    '''
    Return traditional top-style report for one minion
    '''
    return []

salt_top()

# Clean up the window
curses.nocbreak()
window.keypad(0)
window.nodelay(0)
curses.echo()
curses.endwin()

import pprint
pprint.pprint(columns)
sys.exit(0)
